import react.native.component.TextInput;
import react.native.component.View;
import react.native.component.Button;
import react.native.component.Switch;
import react.native.component.Text;
import react.native.component.TouchableHighlight;
import react.native.api.StyleSheet;
import react.native.api.Vibration;
import coconut.data.Model;
import tink.pure.List;
import tink.core.Named;
using StringTools;

@:expose("App")
class App extends coconut.ui.View {
	function render()
		<TodoListView filter=${new TodoFilter()} todos=${new TodoList()}/>
  	;
}

class TodoListView extends coconut.ui.View {
	@:attr var todos:TodoList;
	@:attr var filter:TodoFilter;

	static var styles = StyleSheet.create({
	  app: {
		paddingTop: 100,
		paddingLeft: 10,
		paddingRight: 10,
	  },
	  markAllContainer: {
		flexDirection: 'row',
		justifyContent: 'center',
	  },
	  input: {
		margin: 5,
		borderWidth: 1,
		borderColor: 'grey',
		height: 40,
	  },
	  filterContainer: {
		marginTop: 20,
		flexDirection: 'row',
		justifyContent: 'space-around',
	  },
	  filter: {
		flex: 1,
	  },
	});

	var input:TextInput;

	function render()
	  <View style=${styles.app}>
		<View>
		<TextInput ref=${i -> input = i} style=${styles.input} onSubmitEditing=${e -> {
			  todos.add(e.nativeEvent.text);
			  input.clear();
			  Vibration.vibrate([300, 100, 300, 100]);
		  }} />
		  <View style=${styles.markAllContainer}>
			<if ${todos.items.length > 0}>
			  <if {todos.items.exists(TodoItem.isActive)}>
				<Button onPress={() -> for (i in todos.items) i.completed = true} title="Mark all as completed" />
			  <else>
				<Button onPress={() -> for (i in todos.items) i.completed = false} title="Unmark all as completed" />
			  </if>
			</if>
		  </View>
		</View>

		<for {item in todos.items}>
		  <if {filter.matches(item)}>
			<TodoItemView key={item} item={item} ondeleted={todos.delete.bind(item)} />
		  </if>
		</for>

		<View>
		  <Text>
			<switch {todos.items.count(TodoItem.isActive)}>
			  <case {1}>1 item
			  <case {v}>{v} items
			</switch> left
		  </Text>
		  <View style={styles.filterContainer}>
			<for {f in filter.options}>
				<Button onPress={() -> filter.toggle(f.value)} title={f.name} />
			</for>
			<if {todos.items.exists(TodoItem.isCompleted)}>
			  <Button onPress={todos.clearCompleted} title="Clear Completed" />
			</if>
		  </View>
		</View>
	  </View>
	;
  }

class TodoFilter implements Model {
  @:constant var options:List<Named<TodoItem->Bool>> = [
    new Named('All', function(_) return true),
    new Named('Active', TodoItem.isActive),
    new Named('Completed', TodoItem.isCompleted),
  ];

  @:observable var currentFilter:TodoItem->Bool = options.iterator().next().value;

  public function matches(item:TodoItem):Bool
    return currentFilter(item);

  @:transition function toggle(filter:TodoItem->Bool) {
    for (o in options)
      if (o.value == filter) return { currentFilter: filter };
    return {};
  }

  public function isActive(filter:TodoItem->Bool)
    return filter == currentFilter;
}

class TodoItem implements Model {

  @:editable var completed:Bool = @byDefault false;
  @:editable var description:String;

  @:constant var created:Date = @byDefault Date.now();

  static public function create(description:String)
    return new TodoItem({ description: description });//Constructor is autogenerated

  static public function isActive(item:TodoItem)
    return !item.completed;

  static public function isCompleted(item:TodoItem)
    return item.completed;

}
class TodoList implements Model {

  @:observable var items:List<TodoItem> = @byDefault null;

  @:transition function add(description:String) {
    return { items: items.prepend(TodoItem.create(description)) };
  }

  @:transition function delete(item)
    return { items: items.filter(i -> i != item) };

  @:transition function clearCompleted()
    return { items: items.filter(i -> !i.completed) };

}

class TodoItemView extends coconut.ui.View {

	@:attr var item:TodoItem;
	@:attr var ondeleted:Void->Void;

	static var styles = StyleSheet.create({
	  row: {
		padding: 10,
		flexDirection: 'row',
		alignItems: 'center',
	  },
	  input: {
		marginLeft: 20,
		flex: 1,
		height: 40,
	  },
	  description: {
		marginLeft: 20,
		flex: 1,
	  },
	  delete: {
		fontWeight: 'bold',
		color: 'red',
	  }
	});

	@:state var isEditing:Bool = false;

	function render()
	  <View style={styles.row}>
		<Switch value={item.completed} onValueChange={v -> item.completed = v} />
		<if {isEditing}>
		  <TextInput style={styles.input} autoFocus={true} value={item.description} onChangeText={edit} onBlur={_ -> isEditing = false} />
		<else>
		  <Text style={styles.description} onPress={_ -> this.isEditing = true}>{item.description}</Text>
		  <TouchableHighlight onPress={ondeleted}><View><Text style={styles.delete}>X</Text></View></TouchableHighlight>
		</if>
	  </View>
	;


	function edit(entered:String)
	  switch entered.rtrim() {
		case '': ondeleted();
		case v: item.description = v;
	  }
  }

